#############################################################################
#
# (C) 2021 Cadence Design Systems, Inc. All rights reserved worldwide.
#
# This sample source code is not supported by Cadence Design Systems, Inc.
# It is provided freely for demonstration purposes only.
# SEE THE WARRANTY DISCLAIMER AT THE BOTTOM OF THIS FILE.
#
#############################################################################

# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_MeshLink')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_MeshLink')
    _MeshLink = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_MeshLink', [dirname(__file__)])
        except ImportError:
            import _MeshLink
            return _MeshLink
        try:
            _mod = imp.load_module('_MeshLink', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _MeshLink = swig_import_helper()
    del swig_import_helper
else:
    import _MeshLink
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

ML_BUFFER_SIZE = _MeshLink.ML_BUFFER_SIZE
ML_BUFFER_ARRAY_SIZE = _MeshLink.ML_BUFFER_ARRAY_SIZE
MLINT_ARRAY_SIZE = _MeshLink.MLINT_ARRAY_SIZE
ML_PARAMVERTEX_ARRAY_SIZE = _MeshLink.ML_PARAMVERTEX_ARRAY_SIZE
class MeshLinkObject(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MeshLinkObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MeshLinkObject, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _MeshLink.new_MeshLinkObject()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _MeshLink.delete_MeshLinkObject
    __del__ = lambda self: None

    def assign(self, value):
        return _MeshLink.MeshLinkObject_assign(self, value)

    def value(self):
        return _MeshLink.MeshLinkObject_value(self)

    def cast(self):
        return _MeshLink.MeshLinkObject_cast(self)
    if _newclass:
        frompointer = staticmethod(_MeshLink.MeshLinkObject_frompointer)
    else:
        frompointer = _MeshLink.MeshLinkObject_frompointer
MeshLinkObject_swigregister = _MeshLink.MeshLinkObject_swigregister
MeshLinkObject_swigregister(MeshLinkObject)

def MeshLinkObject_frompointer(t):
    return _MeshLink.MeshLinkObject_frompointer(t)
MeshLinkObject_frompointer = _MeshLink.MeshLinkObject_frompointer

class MeshLinkConstObject(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MeshLinkConstObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MeshLinkConstObject, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _MeshLink.new_MeshLinkConstObject()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _MeshLink.delete_MeshLinkConstObject
    __del__ = lambda self: None

    def assign(self, value):
        return _MeshLink.MeshLinkConstObject_assign(self, value)

    def value(self):
        return _MeshLink.MeshLinkConstObject_value(self)

    def cast(self):
        return _MeshLink.MeshLinkConstObject_cast(self)
    if _newclass:
        frompointer = staticmethod(_MeshLink.MeshLinkConstObject_frompointer)
    else:
        frompointer = _MeshLink.MeshLinkConstObject_frompointer
MeshLinkConstObject_swigregister = _MeshLink.MeshLinkConstObject_swigregister
MeshLinkConstObject_swigregister(MeshLinkConstObject)

def MeshLinkConstObject_frompointer(t):
    return _MeshLink.MeshLinkConstObject_frompointer(t)
MeshLinkConstObject_frompointer = _MeshLink.MeshLinkConstObject_frompointer


def MeshLinkObject_to_const(x):
    return _MeshLink.MeshLinkObject_to_const(x)
MeshLinkObject_to_const = _MeshLink.MeshLinkObject_to_const

def addVec3():
    return _MeshLink.addVec3()
addVec3 = _MeshLink.addVec3

def ML_getMeshTopoInfo(meshAssocObj, meshTopoObj):
    return _MeshLink.ML_getMeshTopoInfo(meshAssocObj, meshTopoObj)
ML_getMeshTopoInfo = _MeshLink.ML_getMeshTopoInfo

def ML_getMeshPointInfo(meshAssocObj, meshPointObj, pvObj):
    return _MeshLink.ML_getMeshPointInfo(meshAssocObj, meshPointObj, pvObj)
ML_getMeshPointInfo = _MeshLink.ML_getMeshPointInfo

def ML_getMeshEdgeInfo(meshAssocObj, meshEdgeObj):
    return _MeshLink.ML_getMeshEdgeInfo(meshAssocObj, meshEdgeObj)
ML_getMeshEdgeInfo = _MeshLink.ML_getMeshEdgeInfo

def ML_getEntityNames(geomGroupObj):
    return _MeshLink.ML_getEntityNames(geomGroupObj)
ML_getEntityNames = _MeshLink.ML_getEntityNames

def ML_getParamVertInfo(pvObj):
    return _MeshLink.ML_getParamVertInfo(pvObj)
ML_getParamVertInfo = _MeshLink.ML_getParamVertInfo

def ML_getParamVerts(meshTopoObj):
    return _MeshLink.ML_getParamVerts(meshTopoObj)
ML_getParamVerts = _MeshLink.ML_getParamVerts

def ML_getProjectionInfo(geomKernelObj, projectionDataObj):
    return _MeshLink.ML_getProjectionInfo(geomKernelObj, projectionDataObj)
ML_getProjectionInfo = _MeshLink.ML_getProjectionInfo

def ML_evalXYZ(geomKernelObj, UV, entityName):
    return _MeshLink.ML_evalXYZ(geomKernelObj, UV, entityName)
ML_evalXYZ = _MeshLink.ML_evalXYZ
MLINT16_FORMAT = _MeshLink.MLINT16_FORMAT
MLUINT16_FORMAT = _MeshLink.MLUINT16_FORMAT
MLINT32_FORMAT = _MeshLink.MLINT32_FORMAT
MLUINT32_FORMAT = _MeshLink.MLUINT32_FORMAT
MLINT64_FORMAT = _MeshLink.MLINT64_FORMAT
MLUINT64_FORMAT = _MeshLink.MLUINT64_FORMAT
MLINT_FORMAT = _MeshLink.MLINT_FORMAT
MLUINT_FORMAT = _MeshLink.MLUINT_FORMAT
MLSIZE_T_FORMAT = _MeshLink.MLSIZE_T_FORMAT
MLSSIZE_T_FORMAT = _MeshLink.MLSSIZE_T_FORMAT
MLPTRDIFF_T_FORMAT = _MeshLink.MLPTRDIFF_T_FORMAT

def ml_assert(val):
    return _MeshLink.ml_assert(val)
ml_assert = _MeshLink.ml_assert

def printVec3(vec):
    return _MeshLink.printVec3(vec)
printVec3 = _MeshLink.printVec3

def printVec2(vec):
    return _MeshLink.printVec2(vec)
printVec2 = _MeshLink.printVec2

def ML_createMeshAssociativityObj(meshAssocObj):
    return _MeshLink.ML_createMeshAssociativityObj(meshAssocObj)
ML_createMeshAssociativityObj = _MeshLink.ML_createMeshAssociativityObj

def ML_freeMeshAssociativityObj(meshAssocObj):
    return _MeshLink.ML_freeMeshAssociativityObj(meshAssocObj)
ML_freeMeshAssociativityObj = _MeshLink.ML_freeMeshAssociativityObj

def ML_parserValidateFile(parseObj, meshlinkFilename, schemaFilename):
    return _MeshLink.ML_parserValidateFile(parseObj, meshlinkFilename, schemaFilename)
ML_parserValidateFile = _MeshLink.ML_parserValidateFile

def ML_parserReadMeshLinkFile(parseObj, meshlinkFilename, meshAssocObj):
    return _MeshLink.ML_parserReadMeshLinkFile(parseObj, meshlinkFilename, meshAssocObj)
ML_parserReadMeshLinkFile = _MeshLink.ML_parserReadMeshLinkFile

def ML_getMeshModelByName(meshAssocObj, modelname, meshModel):
    return _MeshLink.ML_getMeshModelByName(meshAssocObj, modelname, meshModel)
ML_getMeshModelByName = _MeshLink.ML_getMeshModelByName

def ML_addGeometryKernel(meshAssocObj, geomKernelObj):
    return _MeshLink.ML_addGeometryKernel(meshAssocObj, geomKernelObj)
ML_addGeometryKernel = _MeshLink.ML_addGeometryKernel

def ML_setActiveGeometryKernelByName(meshAssocObj, kernelname):
    return _MeshLink.ML_setActiveGeometryKernelByName(meshAssocObj, kernelname)
ML_setActiveGeometryKernelByName = _MeshLink.ML_setActiveGeometryKernelByName

def ML_getActiveGeometryKernel(meshAssocObj, geomKernelObj):
    return _MeshLink.ML_getActiveGeometryKernel(meshAssocObj, geomKernelObj)
ML_getActiveGeometryKernel = _MeshLink.ML_getActiveGeometryKernel

def ML_getNumGeometryFiles(meshAssocObj):
    return _MeshLink.ML_getNumGeometryFiles(meshAssocObj)
ML_getNumGeometryFiles = _MeshLink.ML_getNumGeometryFiles

def ML_getGeometryFileObj(meshAssocObj, index, fileObj):
    return _MeshLink.ML_getGeometryFileObj(meshAssocObj, index, fileObj)
ML_getGeometryFileObj = _MeshLink.ML_getGeometryFileObj

def ML_getFilename(fileObj):
    return _MeshLink.ML_getFilename(fileObj)
ML_getFilename = _MeshLink.ML_getFilename

def ML_readGeomFile(geomKernelObj, geomFilename):
    return _MeshLink.ML_readGeomFile(geomKernelObj, geomFilename)
ML_readGeomFile = _MeshLink.ML_readGeomFile

def ML_getFileAttIDs(meshAssocObj, fileObj, attIDs, sizeAttIDs):
    return _MeshLink.ML_getFileAttIDs(meshAssocObj, fileObj, attIDs, sizeAttIDs)
ML_getFileAttIDs = _MeshLink.ML_getFileAttIDs

def ML_getAttribute(meshAssocObj, attID):
    return _MeshLink.ML_getAttribute(meshAssocObj, attID)
ML_getAttribute = _MeshLink.ML_getAttribute

def ML_findLowestTopoPointByInd(meshModelObj, pointIndex, meshPointObj):
    return _MeshLink.ML_findLowestTopoPointByInd(meshModelObj, pointIndex, meshPointObj)
ML_findLowestTopoPointByInd = _MeshLink.ML_findLowestTopoPointByInd

def ML_findHighestTopoPointByInd(meshModelObj, pointIndex, meshPointObj):
    return _MeshLink.ML_findHighestTopoPointByInd(meshModelObj, pointIndex, meshPointObj)
ML_findHighestTopoPointByInd = _MeshLink.ML_findHighestTopoPointByInd

def ML_findMeshEdgePointByInd(meshModelObj, pointIndex, meshPointObj):
    return _MeshLink.ML_findMeshEdgePointByInd(meshModelObj, pointIndex, meshPointObj)
ML_findMeshEdgePointByInd = _MeshLink.ML_findMeshEdgePointByInd

def ML_findMeshFacePointByInd(meshModelObj, pointIndex, meshPointObj):
    return _MeshLink.ML_findMeshFacePointByInd(meshModelObj, pointIndex, meshPointObj)
ML_findMeshFacePointByInd = _MeshLink.ML_findMeshFacePointByInd

def ML_findLowestTopoEdgeByInds(meshModelObj, indices, numIndices, meshEdgeObj):
    return _MeshLink.ML_findLowestTopoEdgeByInds(meshModelObj, indices, numIndices, meshEdgeObj)
ML_findLowestTopoEdgeByInds = _MeshLink.ML_findLowestTopoEdgeByInds

def ML_getMeshTopoGref(meshTopoObj):
    return _MeshLink.ML_getMeshTopoGref(meshTopoObj)
ML_getMeshTopoGref = _MeshLink.ML_getMeshTopoGref

def ML_getGeometryGroupByID(meshAssocObj, gid, geomGroupObj):
    return _MeshLink.ML_getGeometryGroupByID(meshAssocObj, gid, geomGroupObj)
ML_getGeometryGroupByID = _MeshLink.ML_getGeometryGroupByID

def ML_evalRadiusOfCurvature(geomKernelObj, UV, entityName):
    return _MeshLink.ML_evalRadiusOfCurvature(geomKernelObj, UV, entityName)
ML_evalRadiusOfCurvature = _MeshLink.ML_evalRadiusOfCurvature

def ML_createProjectionDataObj(geomKernelObj, projectionDataObj):
    return _MeshLink.ML_createProjectionDataObj(geomKernelObj, projectionDataObj)
ML_createProjectionDataObj = _MeshLink.ML_createProjectionDataObj

def ML_freeProjectionDataObj(projectionDataObj):
    return _MeshLink.ML_freeProjectionDataObj(projectionDataObj)
ML_freeProjectionDataObj = _MeshLink.ML_freeProjectionDataObj

def ML_projectPoint(geomKernelObj, geomGroupObj, point, projectionDataObj):
    return _MeshLink.ML_projectPoint(geomKernelObj, geomGroupObj, point, projectionDataObj)
ML_projectPoint = _MeshLink.ML_projectPoint

def ML_createMeshLinkParserXercesObj(parseObj):
    return _MeshLink.ML_createMeshLinkParserXercesObj(parseObj)
ML_createMeshLinkParserXercesObj = _MeshLink.ML_createMeshLinkParserXercesObj

def ML_freeMeshLinkParserXercesObj(parseObj):
    return _MeshLink.ML_freeMeshLinkParserXercesObj(parseObj)
ML_freeMeshLinkParserXercesObj = _MeshLink.ML_freeMeshLinkParserXercesObj

def ML_createGeometryKernelGeodeObj(geomKernelObj):
    return _MeshLink.ML_createGeometryKernelGeodeObj(geomKernelObj)
ML_createGeometryKernelGeodeObj = _MeshLink.ML_createGeometryKernelGeodeObj

def ML_freeGeometryKernelGeodeObj(geomKernelObj):
    return _MeshLink.ML_freeGeometryKernelGeodeObj(geomKernelObj)
ML_freeGeometryKernelGeodeObj = _MeshLink.ML_freeGeometryKernelGeodeObj
# This file is compatible with both classic and new-style classes.


#############################################################################
#
# This file is licensed under the Cadence Public License Version 1.0 (the
# "License"), a copy of which is found in the included file named "LICENSE",
# and is distributed "AS IS." TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE
# LAW, CADENCE DISCLAIMS ALL WARRANTIES AND IN NO EVENT SHALL BE LIABLE TO
# ANY PARTY FOR ANY DAMAGES ARISING OUT OF OR RELATING TO USE OF THIS FILE.
# Please see the License for the full text of applicable terms.
#
#############################################################################
